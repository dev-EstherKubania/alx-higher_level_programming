>>> MyList = __import__('1-my_list').MyList


# Test Case 1: Append and check list
my_list = MyList()
my_list.append(1)
assert my_list == [1]

# Test Case 2: Append and check list
my_list.append(2)
assert my_list == [1, 2]

# Test Case 3: Pop and check list
popped = my_list.pop()
assert popped == 2
assert my_list == [1]

# Test Case 4: Append multiple elements
my_list.append(4)
my_list.append(6)
my_list.append(3)
assert my_list == [1, 4, 6, 3]

# Test Case 5: Print sorted list
my_list.print_sorted()
assert my_list == [1, 3, 4, 6]

# Test Case 6: Clear and check list
my_list.clear()
assert my_list == []

# Test Case 7: Append multiple elements
my_list.append(1)
my_list.append(5)
my_list.append(8)
my_list.append(7)
my_list.append(9)
my_list.append(2)
my_list.append(0)

# Test Case 8: Copy list
new_l = my_list.copy()
assert new_l == [1, 5, 8, 7, 9, 2, 0]

# Test Case 9: Count elements
count_2 = my_list.count(2)
assert count_2 == 1

# Test Case 10: Index of element (raises ValueError)
try:
    my_list.index(3)
except ValueError:
    pass

# Test Case 11: Pop element at index
popped = my_list.pop(3)
assert popped == 7
assert my_list == [1, 5, 8, 9, 2, 0]

# Test Case 12: Insert element at index
my_list.insert(9, 0)
assert my_list == [1, 5, 8, 9, 2, 0, 0]

# Test Case 13: Pop element at out-of-range index (raises IndexError)
try:
    my_list.pop(20)
except IndexError:
    pass

# Test Case 14: Call print_sorted with extra argument (raises TypeError)
try:
    my_list.print_sorted(8)
except TypeError:
    pass

# Test Case 15: Clear and check list, then append and print_sorted
my_list.clear()
my_list.print_sorted()
assert my_list == []

my_list.append(9)
my_list.append(-2)
my_list.append(8)

# Test Case 16: Print sorted list
my_list.print_sorted()
assert my_list == [-2, 8, 9]

